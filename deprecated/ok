import {useState} from 'react';
import {motion} from 'framer-motion';
import styles from '../styles/dashboard.module.css';
import {IoMenu} from 'react-icons/io5';

export default function StudentDashboard() {
  const [tasks, setTasks] = useState([
    {id: 1, text: 'Finish homework', completed: false},
    {id: 2, text: 'Read one chapter', completed: false},
    {id: 3, text: 'Read 2 chapters', completed: false},
  ]);

  const [notes, setNotes] = useState([
    {id: 1, title: 'Math Notes', content: 'Derivatives and Integrals'},
    {id: 2, title: 'History Summary', content: 'French Revolution'},
  ]);

  const [goal, setGoal] = useState('Complete all tasks today');
  const [isSidebarOpen, setIsSidebarOpen] = useState(true);
  const [currentPage, setCurrentPage] = useState('Home'); // Track the current page

  const completedTasks = tasks.filter(task => task.completed).length;
  const progress = (completedTasks / tasks.length) * 100 || 0;

  const [isProfileOpen, setIsProfileOpen] = useState(false); // Controls dropdown visibility
  const handleLogout = async () => {
    const confirmLogout = window.confirm('Are you sure you want to log out?');
    if (!confirmLogout) return;

    try {
      const response = await fetch('http://localhost:5000/api/logout', {
        method: 'POST',
        credentials: 'include', // Ensures session cookies are sent
        // headers: {
        //   'Content-Type': 'application/json',
        // },
      });

      if (!response.ok) throw new Error('Logout failed');

      console.log('Logout successful');

      // Clear localStorage/sessionStorage (if needed)
      localStorage.removeItem('token');
      localStorage.removeItem('role');
      sessionStorage.removeItem('token');
      sessionStorage.removeItem('role');

      // Redirect to login page
      window.location.href = '/login';
    } catch (error) {
      console.error('Error logging out:', error);
      alert('Logout failed. Please try again.');
    }
  };

  const toggleTask = id => {
    setTasks(
      tasks.map(task =>
        task.id === id ? {...task, completed: !task.completed} : task,
      ),
    );
  };

  return (
    <div className={styles.container}>
      {/* Sidebar Navigation */}
      <motion.div
        className={`${styles.sidebar} ${
          isSidebarOpen ? styles.sidebarOpen : styles.sidebarClosed
        }`}
        animate={{width: isSidebarOpen ? '300px' : '60px'}}>
        {/* Toggle Button */}
        <div className={styles.toggleContainer}>
          <button
            className={styles.toggleButton}
            onClick={() => setIsSidebarOpen(!isSidebarOpen)}>
            <IoMenu size={24} />
          </button>
        </div>

        <ul className={styles.navList}>
          <li className={styles.navItem} onClick={() => setCurrentPage('Home')}>
            üè† <span>{isSidebarOpen && 'Home'}</span>
          </li>
          <li
            className={styles.navItem}
            onClick={() => setCurrentPage('Notes')}>
            üìù <span>{isSidebarOpen && 'Notes'}</span>
          </li>
          <li
            className={styles.navItem}
            onClick={() => setCurrentPage('To-Do List')}>
            ‚úÖ <span>{isSidebarOpen && 'To-Do List'}</span>
          </li>
          <li
            className={styles.navItem}
            onClick={() => setCurrentPage('Settings')}>
            ‚öôÔ∏è <span>{isSidebarOpen && 'Settings'}</span>
          </li>
        </ul>
      </motion.div>

      {/* Main Content */}
      <div className={styles.mainContent}>
        {/* Profile Section with Page Name */}
        <div className={styles.profileSection}>
          <h2 className={styles.mainContent__h2}>
            Welcome to {currentPage} page
          </h2>

          {/* Profile Button with Dropdown Menu */}
          <div className={styles.profileContainer}>
            <button
              className={styles.profileButton}
              onClick={() => setIsProfileOpen(!isProfileOpen)}>
              P
            </button>

            {isProfileOpen && (
              <motion.div
                className={styles.profileDropdown}
                initial={{opacity: 0, y: -10}}
                animate={{opacity: 1, y: 0}}
                exit={{opacity: 0, y: -10}}>
                <button className={styles.dropdownItem}>Edit Profile</button>
                <button className={styles.dropdownItem} onClick={handleLogout}>
                  Logout
                </button>
              </motion.div>
            )}
          </div>
        </div>

        <div>
          {/* Goal Setting */}
          <div className={styles.goalContainer}>
            <h2 className={styles.goalTitle}>Goal Setting</h2>
            <p>{goal}</p>
            <div className={styles.progressBarContainer}>
              <div
                className={styles.progressBar}
                style={{width: `${progress}%`}}></div>
            </div>
          </div>

          {/* To-Do List */}
          <div className={styles.todoContainer}>
            <h2 className={styles.todoTitle}>To-Do List</h2>
            <div>
              {tasks.map(task => (
                <motion.div
                  key={task.id}
                  initial={{opacity: 0}}
                  animate={{opacity: 1}}>
                  <label className={styles.todoItem}>
                    <input
                      type="checkbox"
                      checked={task.completed}
                      onChange={() => toggleTask(task.id)}
                    />
                    <span
                      className={task.completed ? styles.completedTask : ''}>
                      {task.text}
                    </span>
                  </label>
                </motion.div>
              ))}
            </div>
          </div>

          {/* Recent Notes */}
          <div className={styles.notesContainer}>
            <h2 className={styles.notesTitle}>Recent Notes</h2>
            <div className={styles.notesGrid}>
              {notes.map(note => (
                <motion.div
                  key={note.id}
                  whileHover={{scale: 1.05}}
                  className={styles.noteCard}>
                  <h3>{note.title}</h3>
                  <p>{note.content}</p>
                </motion.div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
